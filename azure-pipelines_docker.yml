# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: Maven@4
  displayName: 'Build'
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx2048m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.17'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'

- task: Bash@3
  displayName: 'RL scan via Docker image'
  inputs:
    targetType: 'inline'
    script: |
      mkdir -p RLreport
      docker run --rm -u $(id -u):$(id -g) \
        -v "$(System.DefaultWorkingDirectory)/target:/packages:ro" \
        -v "$(System.DefaultWorkingDirectory)/RLreport:/report" \
        -e "RLSECURE_ENCODED_LICENSE=$(rlLicenseKey)" \
        -e "RLSECURE_SITE_KEY=$(rlSiteKey)" \
        reversinglabs/rl-scanner:latest rl-scan \
        --package-path=/packages/struts2-showcase.war \
        --report-path=/report --report-format=rl-html,rl-json,cyclonedx,spdx \
        --rl-level=1

- publish: $(System.DefaultWorkingDirectory)/RLreport/report.cyclonedx.json
  displayName: 'Publish CycloneDX'
  artifact: 'CycloneDX-SBOM'
  condition: succeededOrFailed()

- publish: $(System.DefaultWorkingDirectory)/RLreport/report.spdx.json
  displayName: 'Publish SPDX'
  artifact: 'SPDX-SBOM'
  condition: succeededOrFailed()

- publish: $(System.DefaultWorkingDirectory)/RLreport/report.rl.json
  displayName: 'Publish RL-json'  
  artifact: ReversingLabs-JSONreport
  condition: succeededOrFailed()

- publish: $(System.DefaultWorkingDirectory)/RLreport/rl-html
  displayName: 'Publish RL-HTML'
  artifact: ReversingLabs-HTMLreport
  condition: succeededOrFailed()
